
//////////////////////////////////////////////////////////////////////
// Automatically generated by Bradley's GumpStudio and roadmaster's 
// exporter.dll,  Special thanks goes to Daegon whose work the exporter
// was based off of, and Shadow wolf for his Template Idea.
//////////////////////////////////////////////////////////////////////
//#define RunUo2_0

using System;
using Server;
using Server.Gumps;
using Server.Network;
using Server.Commands;
using System.Collections;
using System.Collections.Generic;
using Server.Targeting;
using Server.Mobiles;

namespace Server.Engines.Alchimie
{
    public class GumpAlchimie : Gump
    {
        private Mobile m_caller;
        private List<KeyValuePair<ComposantAlchimique, TargetFlags>> m_effectlist;
        private string m_potName;

        public int GetButtonID(int type, int index)
        {
            return type + (index * ButtonIDinsideval);
        }
        private int ButtonIDinsideval
        {
            get { return (6 >= PotionImpl.MaxNbEffects ? 6 : PotionImpl.MaxNbEffects); }
        }

        public int YSpacing
        {
            get { return 50; }
        }
        public int SpaceTakenYRegs
        {
            get { return PotionImpl.MaxNbEffects * YSpacing; }
        }

        public GumpAlchimie(Mobile from)
            : this(from, "", new List<KeyValuePair<ComposantAlchimique, TargetFlags>>(PotionImpl.MaxNbEffects))
        {
        }

        private GumpAlchimie(Mobile from, string potname, List<KeyValuePair<ComposantAlchimique, TargetFlags>> poteffects) 
            : base( 0, 0 )
        {
            this.Closable=true;
			this.Disposable=true;
			this.Dragable=true;
			this.Resizable=false;

            m_caller = from;
            m_potName = potname;

            // Quelque chose à améliorer ici, pas trop certain quoi.
            m_effectlist = new List<KeyValuePair<ComposantAlchimique, TargetFlags>>();
            for (int i = 0; i < PotionImpl.MaxNbEffects; ++i)
            {
                try
                {
                    m_effectlist.Add(poteffects[i]);
                }
                catch(Exception)
                {
                    m_effectlist.Add(new KeyValuePair<ComposantAlchimique, TargetFlags>());
                }
            }

            // Background
			AddPage(0);
            AddBackground(0, 0, 571, 140 + SpaceTakenYRegs, 5054);
            AddImageTiled(10, 10, 223, 62 + SpaceTakenYRegs, 2624);  // top left
            AddImageTiled(243, 10, 318, 62 + SpaceTakenYRegs, 2624); // top right
            AddImageTiled(10, 82 + SpaceTakenYRegs, 551, 48, 2624);  // bot
            AddAlphaRegion(10, 10, 551, 120 + SpaceTakenYRegs);
            AddImageTiled(397, 60, 2, SpaceTakenYRegs, 505);    // Separateur entre nom reg et type reg

            AddLabel(25, 24, 1935, @"Nom");
            AddTextEntry(25, 55, 193, 20, 1935, 1, m_potName);

            AddLabel(258, 24, 1935, @"Ingrédients");

            // Boutons des ingrédients
            int y = 68;

            int nbavailable = PotionImpl.NbAvailableEffect(m_caller.Skills[SkillName.Alchimie].Value);

            for (int i = 0; i < PotionImpl.MaxNbEffects; ++i)
            {
                if (i < nbavailable)
                {
                    AddButton(254, y, 4020, 4022, GetButtonID(1, i), GumpButtonType.Reply, 0);
                    try
                    {
                        AddLabel(297, y, 1935, m_effectlist[i].Key.name);
                    }
                    catch (Exception)
                    {
                    }

                    AddButton(416, y, 4020, 4022, GetButtonID(2, i), GumpButtonType.Reply, 0);
                    try
                    {
                        AddLabel(467, y, 1935, m_effectlist[i].Value.ToString());
                    }
                    catch (Exception)
                    {
                    }
                }
                else
                {
                    AddButton(254, y, 4017, 4019, GetButtonID(1, i), GumpButtonType.Reply, 0);
                    AddLabel(297, y, 33, "Alchimie: " + (i * PotionImpl.NbEffectUnlockIncrement));
                    AddButton(416, y, 4017, 4019, GetButtonID(2, i), GumpButtonType.Reply, 0);
                    AddLabel(467, y, 33, "Alchimie: " + (i * PotionImpl.NbEffectUnlockIncrement));
                }

                y += YSpacing;
            }

            AddButton(38, 95 + SpaceTakenYRegs, 4017, 4019, GetButtonID(3, 0), GumpButtonType.Reply, 0);
            AddLabel(88, 98 + SpaceTakenYRegs, 1935, @"Reinitialiser");

            AddButton(215, 95 + SpaceTakenYRegs, 4005, 4007, GetButtonID(4, 0), GumpButtonType.Reply, 0);
            AddLabel(265, 98 + SpaceTakenYRegs, 1935, @"Rafraîchir");

            AddButton(390, 95 + SpaceTakenYRegs, 4023, 4025, GetButtonID(5, 0), GumpButtonType.Reply, 0);
            AddLabel(440, 98 + SpaceTakenYRegs, 1935, @"Confirmer");
        }

        

        public override void OnResponse(NetState sender, RelayInfo info)
        {
            if (info.ButtonID <= 0)
                return; // Canceled

            int type = info.ButtonID % ButtonIDinsideval;
            int index = info.ButtonID / ButtonIDinsideval;

            // Update du nom de la potion
            TextRelay relay = info.GetTextEntry(1);
            if (relay != null)
            {
                if (relay.Text != null)
                {
                    m_potName = relay.Text;
                }
            }

            switch (type)
            {
                case 1:
                    {
                        sender.Mobile.Target = new TargetRegs(this, index);
                        return;
                    }
                case 2:
                    {
                        m_caller.SendGump(new ChoixTargetFlagsGump(index, m_caller, m_potName, m_effectlist));
                        return;
                    }
                case 3: // Reinit
                    {
                        m_effectlist = new List<KeyValuePair<ComposantAlchimique, TargetFlags>>();
                        m_potName = "";
                        break;
                    }
                case 4: // Rafraichir
                    {
                        // Rien faire, on r'envoie le gump à la dernière ligne du bloc.
                        break;
                    }
                case 5: // Confirmer
                    {
                        List<BasePotionEffect> effectlist = new  List<BasePotionEffect>();

                        // Mise en place des objets non-null dans une liste temporaire, comme ça la fonction trycreate n'a pas a faire le tri.
                        for (int i = 0; i < m_effectlist.Count; ++i)
                        {
                            if (m_effectlist[i].Key != null)
                            {
                                if(sender.Mobile.Backpack.Items.Contains(m_effectlist[i].Key))
                                {
                                    effectlist.Add(m_effectlist[i].Key.effect);
                                    effectlist[effectlist.Count - 1].m_EffectType = m_effectlist[i].Value;
                                }
                                else
                                {
                                    sender.Mobile.SendMessage("Les composants alchimiques doivent se trouver dans votre sac.");
                                    break;
                                }
                            }
                        }

                        PotionImpl potimpl = PotionImpl.TryCreate((ScriptMobile)m_caller, effectlist);

                        if (potimpl != null)
                        {
                            Potion pot = new Potion(potimpl);
                            pot.InvalidateProperties();

                            if(m_potName != "")
                                pot.Name = m_potName;

                            m_caller.AddToBackpack(pot);

                            for (int i = 0; i < m_effectlist.Count; ++i)
                            {
                                if (m_effectlist[i].Key != null)
                                {
                                    m_effectlist[i].Key.Consume();
                                }
                            }

                            m_caller.PlaySound(0x4E);
                        }
                        break;
                    }
            }

            m_caller.SendGump(new GumpAlchimie((Mobile)m_caller, m_potName, m_effectlist));
        }

        private class TargetRegs : Target
        {
            private GumpAlchimie m_Gump;
            private int m_IdButton;

            public TargetRegs(GumpAlchimie parent, int idButton)
                : base(2, false, TargetFlags.None)
            {
                m_Gump = parent;
                m_IdButton = idButton;
            }

            protected override void OnTarget(Mobile from, object targeted)
            {
                if (targeted is ComposantAlchimique)
                {
                    if (from.Backpack.Items.Contains((ComposantAlchimique)targeted))
                    {
                        bool alreadyChosen = false;
                        foreach (KeyValuePair<ComposantAlchimique, TargetFlags> pair in m_Gump.m_effectlist)
                        {
                            if (pair.Key != null)
                            {
                                if (pair.Key.Serial == ((Item)targeted).Serial)
                                {
                                    alreadyChosen = true;
                                    break;
                                }
                            }
                        }


                        if (alreadyChosen)
                        {
                            from.SendMessage("Vous ne pouvez pas sélectionner le même ingrédient deux fois.");
                        }
                        else
                        {
                            m_Gump.m_effectlist[m_IdButton] = new KeyValuePair<ComposantAlchimique, TargetFlags>((ComposantAlchimique)targeted, m_Gump.m_effectlist[m_IdButton].Value);
                        }
                    }
                    else
                    {
                        from.SendMessage("Le composant alchimique doit se trouver à l'intérieur de votre sac.");
                    }
                }
                else
                {
                    from.SendMessage("Ceci n'est pas un composant alchimique.");
                }
                m_Gump.m_caller.CloseGump(typeof(GumpAlchimie));
                m_Gump.m_caller.SendGump(new GumpAlchimie(m_Gump.m_caller, m_Gump.m_potName, m_Gump.m_effectlist));
            }
        }

        private class ChoixTargetFlagsGump : Gump
        {
            private int m_numeroComposant;
            private Mobile m_caller;
            private List<KeyValuePair<ComposantAlchimique, TargetFlags>> m_effectlist;
            private string m_potName;

            public ChoixTargetFlagsGump(int numeroComposant, Mobile from, string potname, List<KeyValuePair<ComposantAlchimique, TargetFlags>> poteffects)
                : base(0, 0)
            {
                m_numeroComposant = numeroComposant;
                m_caller = from;
                m_effectlist = poteffects;
                m_potName = potname;

                AddPage(0);
                AddBackground(0, 0, 200, 170, 5054);
                AddImageTiled(10, 10, 180, 150, 2624);
                AddAlphaRegion(10, 10, 180, 150);
                AddButton(30, 40, 209, 208, 1, GumpButtonType.Reply, 0);
                AddButton(30, 80, 209, 208, 2, GumpButtonType.Reply, 0);
                AddButton(30, 120, 209, 208, 3, GumpButtonType.Reply, 0);
                AddLabel(70, 40, 1935, @"Beneficial");
                AddLabel(70, 80, 1935, @"Harmful");
                AddLabel(70, 120, 1935, @"None");
            }

            public override void OnResponse(NetState sender, RelayInfo info)
            {
                Mobile from = sender.Mobile;

                TargetFlags flag = TargetFlags.None;
                switch (info.ButtonID)
                {
                    case 0:
                        {
                            break;
                        }
                    case 1:
                        {
                            flag = TargetFlags.Beneficial;
                            break;
                        }
                    case 2:
                        {
                            flag = TargetFlags.Harmful;
                            break;
                        }
                    case 3:
                        {
                            flag = TargetFlags.None;
                            break;
                        }
                }
                ComposantAlchimique composant = m_effectlist[m_numeroComposant].Key;
                m_effectlist[m_numeroComposant] = new KeyValuePair<ComposantAlchimique, TargetFlags>(composant, flag);

                m_caller.SendGump(new GumpAlchimie(m_caller, m_potName, m_effectlist));
            }
        }
    }
}